name: Testkube on vCluster with ArgoCD - Complete Isolation
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main 

env:
  PR_NUMBER: ${{ github.event.number || github.run_id }}

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install CLI tools
        run: |
          # Install vCluster CLI
          curl -sSL https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64 -o vcluster
          chmod +x vcluster
          sudo mv vcluster /usr/local/bin
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Verify existing installations
        run: |
          echo "=== Host Cluster Info ==="
          kubectl cluster-info
          kubectl get nodes
          
          echo "=== Available Namespaces ==="
          kubectl get namespaces
          
          echo "=== Checking ArgoCD ==="
          kubectl get pods -n argocd || echo "ArgoCD namespace not found"

      - name: Pre-flight Cleanup
        run: |
          echo "=== Pre-flight Cleanup for Ephemeral Demo ==="
          
          # Clean up any potential leftovers from previous demo runs
          kubectl get namespaces | grep "demo-" | awk '{print $1}' | xargs -r kubectl delete namespace --ignore-not-found=true || true
          kubectl get applications -n argocd 2>/dev/null | grep "nginx-vcluster-pr-" | awk '{print $1}' | xargs -r kubectl delete application -n argocd --ignore-not-found=true || true
          
          # Clean up any leftover vClusters
          vcluster list | grep "testkube-vcluster-" | awk '{print $1, $2}' | while read name namespace; do
            echo "Cleaning up leftover vCluster: $name in $namespace"
            vcluster delete "$name" --namespace "$namespace" || true
          done
          
          echo "=== Pre-flight cleanup completed ==="

      - name: Install or Verify ArgoCD
        run: |
          echo "=== Checking ArgoCD Installation ==="
          
          if kubectl get namespace argocd >/dev/null 2>&1; then
            echo "ArgoCD namespace exists, checking pods..."
            ARGOCD_PODS=$(kubectl get pods -n argocd --no-headers 2>/dev/null | wc -l)
            if [ "$ARGOCD_PODS" -gt 0 ]; then
              echo "ArgoCD pods found, checking if they're ready..."
              kubectl get pods -n argocd
              kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd || echo "ArgoCD server not ready yet"
            else
              echo "ArgoCD namespace exists but no pods found, installing..."
              kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
              kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
            fi
          else
            echo "ArgoCD not found, installing..."
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
          fi
          
          echo "=== ArgoCD Status ==="
          kubectl get pods -n argocd
          kubectl get svc -n argocd

      # ==================== vCluster Module ====================
      - name: Create vCluster
        run: |
          echo "=== Creating vCluster for PR $PR_NUMBER ==="
          
          # Save host context
          HOST_CONTEXT=$(kubectl config current-context)
          echo "HOST_CONTEXT=$HOST_CONTEXT" >> $GITHUB_ENV
          echo "Host cluster context: $HOST_CONTEXT"
          
          # Create namespace
          kubectl create namespace demo-$PR_NUMBER --dry-run=client -o yaml | kubectl apply -f -
          
          # Create vCluster with proper configuration
          vcluster create testkube-vcluster-$PR_NUMBER \
            --namespace demo-$PR_NUMBER \
            --connect=false \
            --expose
          
          # Wait for vCluster to be ready
          echo "Waiting for vCluster to be ready..."
          sleep 30
          
          echo "=== vCluster created successfully ==="
          kubectl get all -n demo-$PR_NUMBER
          kubectl get svc -n demo-$PR_NUMBER

      - name: Setup vCluster for ArgoCD Integration
        run: |
          echo "=== Setting up vCluster connectivity for ArgoCD ==="
          
          # Connect to vCluster temporarily for ArgoCD setup
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER &
          VCLUSTER_PID=$!
          echo "VCLUSTER_PID=$VCLUSTER_PID" >> $GITHUB_ENV
          sleep 30

          echo "=== Creating nginx namespace in vCluster ==="
          kubectl create namespace nginx --dry-run=client -o yaml | kubectl apply -f -
          
          echo "=== Verifying vCluster connection ==="
          kubectl get nodes
          kubectl get namespaces
          
          # IMPORTANT: Get the vCluster context name WHILE connected
          VCLUSTER_CONTEXT=$(kubectl config current-context)
          echo "vCluster context name: $VCLUSTER_CONTEXT"
          echo "VCLUSTER_CONTEXT=$VCLUSTER_CONTEXT" >> $GITHUB_ENV
          
          # Save vCluster kubeconfig for ArgoCD
          echo "=== Saving vCluster kubeconfig ==="
          kubectl config view --raw > /tmp/vcluster-config.yaml
          
          # Switch back to host context for ArgoCD operations
          kubectl config use-context $HOST_CONTEXT
          
          echo "✅ vCluster kubeconfig prepared for ArgoCD"

      - name: Configure ArgoCD to Deploy to vCluster
        run: |
          echo "=== Configuring ArgoCD to Deploy to vCluster ==="
          
          # Ensure we're on host cluster for ArgoCD operations
          kubectl config use-context $HOST_CONTEXT
          echo "Current context: $(kubectl config current-context)"
          
          # Get ArgoCD credentials
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          if [ -z "$ARGOCD_PASSWORD" ]; then
            echo "❌ Failed to get ArgoCD password"
            exit 1
          fi
          
          # Get ArgoCD server endpoint
          ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          
          if [ -z "$ARGOCD_SERVER" ]; then
            echo "No external IP found, setting up port-forward..."
            pkill -f "kubectl port-forward.*argocd-server" || true
            sleep 5
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            ARGOCD_PORT_FORWARD_PID=$!
            echo "ARGOCD_PORT_FORWARD_PID=$ARGOCD_PORT_FORWARD_PID" >> $GITHUB_ENV
            sleep 20
            ARGOCD_SERVER="localhost:8080"
          fi
          
          echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> $GITHUB_ENV
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV
          
          # Login to ArgoCD
          argocd login "$ARGOCD_SERVER" --username admin --password "$ARGOCD_PASSWORD" --insecure
          
          # Add vCluster to ArgoCD
          argocd cluster add "$VCLUSTER_CONTEXT" \
            --kubeconfig /tmp/vcluster-config.yaml \
            --name "vcluster-pr-$PR_NUMBER" \
            --yes
          
          sleep 10
          
          # Get vCluster server URL
          VCLUSTER_SERVER=$(argocd cluster list -o server | grep -v "^https://kubernetes.default.svc$" | grep -v "^NAME$" | head -1)
          if [ -z "$VCLUSTER_SERVER" ]; then
            echo "❌ Failed to get vCluster server URL"
            argocd cluster list
            exit 1
          fi
          
          echo "VCLUSTER_SERVER=$VCLUSTER_SERVER" >> $GITHUB_ENV
          
          # Create ArgoCD application
          argocd app create nginx-vcluster-pr-$PR_NUMBER \
            --repo "https://github.com/techmaharaj/Testkube-vCluster-ArgoCD" \
            --path k8s \
            --dest-server "$VCLUSTER_SERVER" \
            --dest-namespace nginx \
            --revision ${{ github.head_ref || github.ref_name }} \
            --sync-policy automated \
            --upsert
          
          # Sync the application
          argocd app sync nginx-vcluster-pr-$PR_NUMBER --force --timeout 300
          
          echo "✅ ArgoCD to vCluster configuration completed"

      # ==================== Testkube in vCluster Module ====================
      - name: Setup Testkube CLI
        uses: kubeshop/setup-testkube@v1
        with:
          organization: ${{ secrets.TESTKUBE_ORG_ID }}
          environment: ${{ secrets.TESTKUBE_ENV_ID }}
          token: ${{ secrets.TESTKUBE_API_TOKEN }}

      - name: Connect to vCluster for Testkube Setup  
        run: |
          echo "=== Connecting to vCluster ==="
          
          # Clean up existing connections
          kill $VCLUSTER_PID 2>/dev/null || true
          pkill -f "vcluster connect" || true
          sleep 5
          
          # Wait for vCluster to be fully ready
          echo "=== Waiting for vCluster to be ready ==="
          kubectl wait --for=condition=ready pod/testkube-vcluster-$PR_NUMBER-0 -n demo-$PR_NUMBER --timeout=300s
          
          # Connect to vCluster
          echo "=== Connecting to vCluster ==="
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER &
          VCLUSTER_PID=$!
          echo "VCLUSTER_PID=$VCLUSTER_PID" >> $GITHUB_ENV
          sleep 30
          
          # Get current context and proceed regardless of namespace count
          CURRENT_CONTEXT=$(kubectl config current-context)
          echo "Current context: $CURRENT_CONTEXT"
          echo "VCLUSTER_CONTEXT=$CURRENT_CONTEXT" >> $GITHUB_ENV
          
          # Show what we're working with but don't fail
          echo "Available namespaces:"
          kubectl get namespaces
          
          NAMESPACE_COUNT=$(kubectl get namespaces --no-headers | wc -l)
          echo "Namespace count: $NAMESPACE_COUNT"
          
          if [ $NAMESPACE_COUNT -gt 10 ]; then
            echo "⚠️ WARNING: High namespace count ($NAMESPACE_COUNT) detected."
            echo "This might indicate connection to host cluster, but continuing..."
          else
            echo "✅ Successfully connected to vCluster (Namespace count: $NAMESPACE_COUNT)"
          fi
          
          # Ensure testkube namespace exists regardless
          kubectl create namespace testkube --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✅ Proceeding with context: $CURRENT_CONTEXT"
      
      - name: Install Testkube Runner in vCluster
        run: |
          echo "=== Installing Testkube Runner in vCluster ==="
          
          # Ensure we're connected to vCluster
          CURRENT_CONTEXT=$(kubectl config current-context)
          echo "Current context: $CURRENT_CONTEXT"
          
          # Verify we're in vCluster (should have fewer namespaces)
          NAMESPACE_COUNT=$(kubectl get namespaces --no-headers | wc -l)
          echo "Namespace count: $NAMESPACE_COUNT"
          
          # Create unique runner name for this PR
          RUNNER_NAME="vcluster-runner-pr-$PR_NUMBER"
          echo "RUNNER_NAME=$RUNNER_NAME" >> $GITHUB_ENV
          echo "Creating runner: $RUNNER_NAME"
          
          # Get current environment info to avoid interactive prompt
          echo "=== Current Testkube Context ==="
          testkube config
          
          # Install runner in vCluster
          # Get the current environment from testkube config to avoid interactive prompt
          echo "=== Getting current Testkube environment ==="
          ENVIRONMENT_NAME=$(testkube config | grep "Environment" | awk '{print $3}')
          echo "Using environment: $ENVIRONMENT_NAME"
          
          testkube install runner "$RUNNER_NAME" \
            --create \
            --floating \
            --label environment=vcluster \
            --label pr_number="$PR_NUMBER" \
            --label purpose=ephemeral_testing \
            --namespace testkube \
            --env "$ENVIRONMENT_NAME"
          
          echo "=== Verifying Runner Installation ==="
          # Wait a bit for runner to be ready
          sleep 30
          
          # Check if runner is available
          testkube get runner "$RUNNER_NAME" || {
            echo "❌ Runner not found. Checking available runners:"
            testkube get runners
            exit 1
          }
          
          echo "✅ Testkube runner installed successfully in vCluster"

      - name: Verify Testkube Runner Registration
        run: |
          echo "=== Verifying Testkube Runner Registration ==="
          
          # Check if runner is registered with Testkube Cloud
          testkube get runners
          
          # Wait for runner to register with cloud (may take a moment)
          sleep 30
          
          # Verify our vCluster runner is available
          if testkube get runners | grep -q "$RUNNER_NAME"; then
            echo "✅ vCluster runner successfully registered with Testkube Cloud"
          else
            echo "❌ vCluster runner not found in Testkube Cloud"
            echo "Available runners:"
            testkube get runners
            exit 1
          fi

      # ==================== Test Execution in vCluster ====================
      - name: Run Chainsaw Tests in vCluster
        id: run-chainsaw-tests
        continue-on-error: true
        run: |
          echo "=== Running Chainsaw Tests in vCluster ==="
          echo "Target runner: $RUNNER_NAME"
          
          # Execute chainsaw test workflow targeting vCluster runner
          testkube run testworkflow chainsaw-nginx -f \
            --target name=$RUNNER_NAME \
            --tag environment=vcluster \
            --tag test-type=chainsaw \
            --tag pr=PR-$PR_NUMBER \
            --tag cluster=demo-$PR_NUMBER \
            --tag demo=gitopscon-isolated

      - name: Run k6 Performance Tests in vCluster
        id: run-k6-tests
        continue-on-error: true
        run: |
          echo "=== Running k6 Performance Tests in vCluster ==="
          echo "Target runner: $RUNNER_NAME"
          
          # Execute k6 test workflow targeting vCluster runner
          testkube run testworkflow k6-sample -f \
            --target name=$RUNNER_NAME \
            --tag environment=vcluster \
            --tag test-type=k6 \
            --tag pr=PR-$PR_NUMBER \
            --tag cluster=demo-$PR_NUMBER I am running a few minutes late; my previous meeting is running over.
            --tag demo=gitopscon-isolated

      # ==================== Log Collection and Artifacts ====================
      - name: Collect Test Results and Logs
        if: always()
        run: |
          echo "=== Collecting Test Results and Logs ==="
          
          # Create artifacts directory
          mkdir -p /tmp/test-artifacts
          
          # Get recent test executions for our runner
          echo "Recent test executions:" > /tmp/test-artifacts/test-summary.txt
          testkube get testworkflowexecutions --limit 10 >> /tmp/test-artifacts/test-summary.txt
          
          # Collect vCluster pod logs
          echo "Collecting vCluster pod logs..."
          kubectl config use-context $VCLUSTER_CONTEXT || true
          kubectl get pods -A > /tmp/test-artifacts/vcluster-pods.txt || true
          kubectl logs -l app.kubernetes.io/name=testkube-runner -n testkube > /tmp/test-artifacts/testkube-runner-logs.txt || true
          
          # Collect nginx deployment status
          kubectl get all -n nginx > /tmp/test-artifacts/nginx-status.txt || true
          
          echo "✅ Artifacts collected"

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vcluster-test-results-pr-${{ env.PR_NUMBER }}
          path: /tmp/test-artifacts/
          retention-days: 30

      # ==================== Cleanup Module ====================
      - name: Cleanup Testkube Runner
        if: always()
        run: |
          echo "=== Cleaning up Testkube Runner ==="
          
          # Delete runner from Testkube Cloud
          testkube delete runner $RUNNER_NAME --delete --uninstall || true
          
          echo "✅ Testkube runner cleaned up"

      - name: Cleanup ArgoCD Application
        if: always()
        run: |
          echo "=== Cleaning up ArgoCD Application ==="
          
          # Switch to host context for ArgoCD operations
          kubectl config use-context $HOST_CONTEXT || true
          
          # Login to ArgoCD
          argocd login "$ARGOCD_SERVER" --username admin --password "$ARGOCD_PASSWORD" --insecure || true
          
          # Delete ArgoCD application
          kubectl delete application nginx-vcluster-pr-$PR_NUMBER -n argocd --ignore-not-found=true || true
          
          # Remove cluster from ArgoCD
          argocd cluster rm "vcluster-pr-$PR_NUMBER" --yes || true
          
          echo "✅ ArgoCD resources cleaned up"

      - name: Cleanup vCluster
        if: always()
        run: |
          echo "=== Cleaning up vCluster ==="
          
          # Kill all port-forward and vCluster processes
          kill $VCLUSTER_PID $ARGOCD_PORT_FORWARD_PID 2>/dev/null || true
          pkill -f "kubectl port-forward" || true
          pkill -f "vcluster connect" || true
          
          # Switch back to host context
          kubectl config use-context $HOST_CONTEXT || true
          
          # Disconnect vCluster
          vcluster disconnect || true
          
          # Delete vCluster and namespace
          vcluster delete testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER || true
          kubectl delete namespace demo-$PR_NUMBER --ignore-not-found=true || true
          
          echo "✅ vCluster cleanup completed"

      - name: Report Test Results
        if: always()
        run: |
          echo "=== Test Execution Summary ==="
          echo "Chainsaw Test: ${{ steps.run-chainsaw-tests.outcome }}"
          echo "k6 Test: ${{ steps.run-k6-tests.outcome }}"
          
          if [[ "${{ steps.run-chainsaw-tests.outcome }}" == "failure" || "${{ steps.run-k6-tests.outcome }}" == "failure" ]]; then
            echo "❌ Some tests failed!"
            echo "Check test artifacts and Testkube Cloud dashboard for details"
            echo "Environment: ${{ secrets.TESTKUBE_ENV_ID }}"
            echo "Runner: $RUNNER_NAME"
            exit 1
          else
            echo "✅ All tests passed!"
          fi
