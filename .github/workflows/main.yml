name: Testkube vCluster Integration Tests
on:
  workflow_dispatch:
  pull_request:
    branches: [main]

env:
  PR_NUMBER: ${{ github.event.number || github.run_id }}
  VCLUSTER_NAME: testkube-vcluster-${{ github.event.number || github.run_id }}
  NAMESPACE: demo-${{ github.event.number || github.run_id }}
  RUNNER_NAME: vcluster-runner-pr-${{ github.event.number || github.run_id }}

jobs:
  vcluster-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup GKE Access
        run: |
          echo '${{ secrets.GCP_CREDENTIALS }}' | base64 -d > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}
          echo "HOST_CONTEXT=$(kubectl config current-context)" >> $GITHUB_ENV

      - name: Install Tools
        run: |
          # vCluster CLI
          curl -sSL https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64 -o vcluster
          chmod +x vcluster && sudo mv vcluster /usr/local/bin
          
          # ArgoCD CLI  
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd && sudo mv argocd /usr/local/bin

      - name: Setup ArgoCD
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd

      - name: Create vCluster Environment
        run: |
          # Cleanup any existing resources
          kubectl delete namespace $NAMESPACE --ignore-not-found=true
          
          # Create vCluster
          kubectl create namespace $NAMESPACE
          vcluster create $VCLUSTER_NAME --namespace $NAMESPACE --connect=false --expose
          
          # Wait for readiness
          kubectl wait --for=condition=ready pod/$VCLUSTER_NAME-0 -n $NAMESPACE --timeout=300s

      - name: Configure ArgoCD for vCluster
        run: |
          # Connect to vCluster and save config
          vcluster connect $VCLUSTER_NAME --namespace $NAMESPACE &
          VCLUSTER_PID=$!
          sleep 30
          
          # Create nginx namespace in vCluster
          kubectl create namespace nginx
          
          # Save vCluster kubeconfig
          kubectl config view --raw > /tmp/vcluster-config.yaml
          VCLUSTER_CONTEXT=$(kubectl config current-context)
          
          # Return to host cluster
          kubectl config use-context $HOST_CONTEXT
          kill $VCLUSTER_PID
          
          # Setup ArgoCD
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          
          # Port-forward for ArgoCD access
          kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          ARGOCD_PID=$!
          sleep 20
          
          # Login and add cluster
          argocd login localhost:8080 --username admin --password "$ARGOCD_PASSWORD" --insecure
          argocd cluster add "$VCLUSTER_CONTEXT" --kubeconfig /tmp/vcluster-config.yaml \
            --name "vcluster-pr-$PR_NUMBER" --yes
          
          # Get vCluster server URL
          VCLUSTER_SERVER=$(argocd cluster list -o server | grep -v "kubernetes.default.svc" | grep -v "NAME" | head -1)
          
          # Deploy nginx application
          argocd app create nginx-vcluster-pr-$PR_NUMBER \
            --repo "https://github.com/techmaharaj/testkube-vcluster-test" \
            --path k8s \
            --dest-server "$VCLUSTER_SERVER" \
            --dest-namespace nginx \
            --revision ${{ github.head_ref || github.ref_name }} \
            --sync-policy automated \
            --upsert
          
          # Sync application
          argocd app sync nginx-vcluster-pr-$PR_NUMBER --timeout 300
          
          # Cleanup port-forward
          kill $ARGOCD_PID
          
          echo "VCLUSTER_CONTEXT=$VCLUSTER_CONTEXT" >> $GITHUB_ENV
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV

      - name: Setup Testkube
        uses: kubeshop/setup-testkube@v1
        with:
          organization: ${{ secrets.TESTKUBE_ORG_ID }}
          environment: ${{ secrets.TESTKUBE_ENV_ID }}
          token: ${{ secrets.TESTKUBE_API_TOKEN }}

      - name: Install Testkube Runner
        run: |
          # Connect to vCluster
          vcluster connect $VCLUSTER_NAME --namespace $NAMESPACE &
          VCLUSTER_PID=$!
          sleep 30
          
          # Create testkube namespace and install runner
          kubectl create namespace testkube --dry-run=client -o yaml | kubectl apply -f -
          
          testkube install runner $RUNNER_NAME \
            --create --floating \
            --label environment=vcluster \
            --label pr_number="$PR_NUMBER" \
            --namespace testkube \
            --env testkube-gke
          
          # Setup RBAC for chainsaw tests
          RUNNER_SA="exec-sa-testkube-$RUNNER_NAME"
          cat > /tmp/chainsaw-rbac.yaml << EOF
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: testkube-chainsaw-access
          rules:
          - apiGroups: ["", "apps"]
            resources: ["*"]
            verbs: ["get", "list", "watch"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: testkube-chainsaw-access
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: testkube-chainsaw-access
          subjects:
          - kind: ServiceAccount
            name: $RUNNER_SA
            namespace: testkube
          EOF
          kubectl apply -f /tmp/chainsaw-rbac.yaml
          
          # Wait for runner readiness
          sleep 30
          testkube get runner $RUNNER_NAME
          
          echo "VCLUSTER_PID=$VCLUSTER_PID" >> $GITHUB_ENV

      - name: Run Tests
        run: |
          # Test tags for this run
          TEST_TAGS="--tag runner=$RUNNER_NAME --tag environment=vcluster --tag pr=PR-$PR_NUMBER"
          
          echo "=== Running k6 Performance Tests ==="
          testkube run testworkflow k6-sample -f \
            --target name=$RUNNER_NAME \
            $TEST_TAGS \
            --tag test-type=k6
          
          echo "=== Running Chainsaw Integration Tests ==="
          testkube run testworkflow chainsaw-nginx -f \
            --target name=$RUNNER_NAME \
            $TEST_TAGS \
            --tag test-type=chainsaw

      - name: Collect Test Artifacts
        if: always()
        run: |
          mkdir -p /tmp/artifacts
          
          # Test results
          testkube get testworkflowexecutions --limit 5 > /tmp/artifacts/test-results.txt
          
          # vCluster status
          kubectl get all -n nginx > /tmp/artifacts/nginx-status.txt 2>/dev/null || true
          kubectl get pods -A > /tmp/artifacts/vcluster-pods.txt 2>/dev/null || true

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-pr-${{ env.PR_NUMBER }}
          path: /tmp/artifacts/
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          # Cleanup Testkube runner
          testkube delete runner $RUNNER_NAME --delete --uninstall || true
          
          # Cleanup ArgoCD app
          kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          ARGOCD_PID=$!
          sleep 10
          argocd login localhost:8080 --username admin --password "$ARGOCD_PASSWORD" --insecure || true
          kubectl delete application nginx-vcluster-pr-$PR_NUMBER -n argocd --ignore-not-found=true
          argocd cluster rm "vcluster-pr-$PR_NUMBER" --yes || true
          kill $ARGOCD_PID || true
          
          # Cleanup vCluster
          kill $VCLUSTER_PID || true
          pkill -f "vcluster connect" || true
          kubectl config use-context $HOST_CONTEXT || true
          vcluster delete $VCLUSTER_NAME --namespace $NAMESPACE || true
          kubectl delete namespace $NAMESPACE --ignore-not-found=true
